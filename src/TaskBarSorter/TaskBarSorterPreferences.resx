<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAACwBAAAsAQAAAAAAAAAA
        AADGz9jJ09q9ydu2ur+svMK7x8e0wcO0ydHa5em0u75RYW5YbH5mirKnzeuixOG11OtidHsaPFpob5DO
        0+jp7/qJl6ltgI/E2OOyvsrR09vl5evBwszd3uiwsLzs7/PSztTf2tzn5urMy89jZ2y1u8DS29/Y3+LY
        5Oiyv8c1RFRYcI6LsdGEs9+73PbW7fze8/uEorVBU3y1udbs8vnh6OuaoaqWnqVlcoDT1d/V1trX2eG6
        vcvGz9i3vse3wMrAwMbW19vI0dq0wc+lsbe8yM7Gz9i+y9PE0NS5wchwf490mbuh0PC53vjF6fvV7/3f
        9Py5zNFpeo+otc/O1+SKk5Z8iI6PkpZsfIna5enY0tfz8/O2x9qHiZPf3uDCxc2JkJm7ydWevNXO4+vY
        6vHL3ejL1927x83R3OCSmZycmJdydXlsdIGZudC31eiyzduitsGaoqJeZ2uHio6Zm5xjbnKcoaR5f3pw
        cHClp6/PztK0w9Pc6va8wcrd3eOXnaqys8Hl7fSvu8WYq7iarbqJmaBRVFiyt7qmoaOAfX+Wk49nZGB9
        enaTlJiRlplseYGhpKl6f4J/foCipKVia26anp97fX6HjI2ysK+gnZmIi5PS2N3m6+zh4+vf4ubKzdLN
        09pUTVIzOUBbc4ufwNROXmRbWFq4sLGloJ97dW6EgHt3dnKGg3+TmJmEiImCgYOpqKpucneYl5l7gYCH
        jYxwdXSUlpalpKB6f355fX6Vk5O6ubvZ3uHV19/IydPl6Oytt8ErKzEqPUxFXGtGV2BGRUGUj5CoqaeP
        hIB9enaFgYCTmJmQjYmQlJVvcXGfn5+KjZJ4fH2goqN4fXxwdXSkoqKUlJR6fH2PjY2yrq2fm5qNi4uf
        pqmEkZ+JlqbX3uGmw8giKCczP0MpMzo2ODmFhICNhoOyqqqZk46cmpl8enmIkJCGgoGTlZaGhoampadv
        c3SYlZd0eXhzdXWsqKd5fXhzdXWkoqKlo6J7fX55e3uPjI60s7Wao6exwci0vsW8v81ORTcqMC8lKil5
        cGyinZyLhoOdmpanpaSkn6B4c3CYnZyEg3+RlpV/fXybnZ1+gICWmpt6f36opqV3e3aMjYuenp6Ni4qM
        i4eclpGdmZScmJednJi/vb2ss7yww8uHh4dtWUgsJBdEPjmVkYyKgnukpKSFfnuWjYmtrKiOiIOdnZ1/
        goaIjYyXmph6fXuWlpZvc3SkoJ9vcG6ioJ+Oj41vb297gH56f32Bg4OSkpKPjoqYmJjMzMyIkJd8iIgv
        OzVNQTUsIhtsYlunoqSPiYSZjIqrqqyJgH2moqGRioGhpqV/eneYmpujoaB5eXmmpKSJg35vdXSxr65+
        f32QkY+cnJygm5qblpWQkY2KioqLioaKioqTk5OJjY48RkAdLSIaHyAlJSWIgn2hmpeup6qRio2jpKKQ
        kJCQi4ifm5qflpOLiYmuqaqxsra6uLixrax2cnGYmZWFiIaWko1zcm5xc3N8fn6Bg4N3eHSAgoONi4qN
        iYiblpORjItpc3MlOjIODw07NjOMh4aKhIWnoqOqpaaWjIyjpaWMi42hnJ6ooZ63tLbHw8K7vb7MycVx
        aF6FfHiUk4+op6OIf3ukoJ+VlJB8f314fXyFiouMjZGMiomOkJCZmJStra2Wm54rN0EMDg5TS0uhlZOV
        kI2YkJCdm5ualZaal5OxrK2io6einZrNysx4aVk7NCtLRDtPUExHRT0UEA9AODEgHR9IRkVxcGyIh4Ob
        oJ+HiIZ2d3WXlZSgnp2Zl5eMjYuLkI83QE0QEBBORj+ZlJOgmZajn56Zl5eWk5WOiIOfmpysq62doaK6
        srJnYVw7PDgyMiwhIiAuMDATEREICgssMS92eHiVlpqChIRwdG+Kj5CgoKCPjIiHi4aXlJCjm5usp6k3
        SUoFCAxYT0udlJCTioePiYSlpaWooKCblpeAgICXk5KysbOTlZZVVloGBgYNERYTFh4UFRkYHCEPExhC
        REV8gYBvbmqGiYeOjo6Eh4WBg4OFh4eZl5aal5OTkIydmJlFUVUMDxNlYF+glZemoKGhm5yQi4iRjImd
        m5ukpKSjoKKVk5OamJi2uLgSERMMEBUOERULDAoCBAQEBAQ3NjJ4c3CBgYF8e3eGiIiNj4+VlY+ZmJSB
        hoSWlpaloJ+vr68uRU0OERVvZ2CQg4GXkI2rp6arqammoqGhnZyRjImPiIWVlpSpqam0trZYVFMEBAQD
        AwMCBAQDAwMGCAhLUlVpYWGVlZV+f3uCgX2GjYptcG6RkIyWk4+LkI+Dg4O1t7c0SlAMDxRdW1qhnpqw
        q6qcmpmlnJmelI2moqGmoqGspaKZmJSMjYttamVgZ2QoMTQNDw8FAwMSFhdNUFSFg4NpamhwbGeUmZd3
        eHSFiIaNkI6PjoqSkI+urKuclZKgoqMrSE0XGBZIQj1zb2R9dHCGgHuBe3RuaGFqaGB6eHeBgHyMiIeX
        m5yjpqSsqqmIhoVaXlkhKCuNkZJ4dXGHgn98fHaChYN7d3KKj41zcGyam5ePiYSSioOOi4fBvLuWm540
        TEwPExQvLCiQiIGno56moaCsp6iopqalo6Orp6ainpmKgX1/e3qChYN1b2pvcXF8fXsgLDKjo6OBgXt7
        eXiQkY1+f31/fnqSk5GOkJCKh4OLgn6Hf3jMx8jEwsFnb248S0cXGxYiIR13bGSHfHSIf3aDe3SDfXaC
        fnl9eXSBfnqTk5OkoqF/gHyIiIivrKhxdXBvbGijqKd2eHhzcGuYlI92c2+YmZd+eHGalZKHhH+HhoK7
        trXT0MyemZY0QFgqPFMWGR4jIBxDPDOck4+el5SqqKiwq6qhnJmgoKCztLKOiIFjYVmQkY+hnZxoamSn
        qal4e3mKh4OZm5x3cG2koqFycW2lp6eCfnl5dnK0srGvrayuqaa/s7FjYmY5QUgyQEwwLyUrKiAkIhh/
        eXS9vb3Hx8eur62gm5iOiYaal495b2Wkn6Ggn5ttbWekqqmanJ2aj4d1b2qurq5xa2aWlpZzb2qurKt/
        eW6emZrPzcyop6OwqaaHfXY2OlIyOU0mMlQxNSouLCEnJhgwLia0srGroZqbj4WOg3ufmZSVhnaKfnSI
        gndvbGekpKSpq6uEenOZi398eHeurq5uamWjnp94eHKxr66mnZq3s7Kwqaahm5afmZJXWVk+RkZBRk81
        P1E5Nyw9OSc2MCU0MCVbWFSTkYl/eW6JeG+Wh3eEfGtxbGNwb2umq6yhmpd9enWNgXt1b2qPj4+usLFq
        Z1+vr6+NjIjDwcC2sKuooJmhoJydkopeWllbV1JFSkk+QVA0PlZCPzFGPjFBOzA3NihXSDVhWlGCem2C
        dmp7c2xkZmCLhIGuqaaWjoeAf3uKh4OTjINnaWm2tra8ubWdl5LHwr+gm5ibkYqjmZKwp6OzsbBybWxq
        ZVxgXFFgXlZLTU0/SEtAPjM9PS1ORThDPTBEPSpCOypVS0F3b2iBfHmloJ+lnZZ4dW2RioFnZ2GoqKh5
        c26Vk5PNy8uqpaKNh4KlnJN1dW+WjYm5rauyrKeCgH9iYFZsZFdZV01gXlRaWVU9RUU5NjJMRTRYSz1F
        PzRPSDdMRTFeUDlcTjuPioeooZ6Fd3GrpqWDhICGh4O1ubp+e3ennZaupaGspqGfmZSZk46lpqqonpeK
        f3tbWlxCQUoyOENgW1JqY1pgXlZGTEtBRUpNRzxLRDtKRDdDQDgyNTkuLz0rLzpHPTYuKzozMECXk5id
        mZR5eHSurq7Gy86gj4KKem6GgHu2tbenoJ2VioKemZhgXFdJSERpYFNgW1JZVFVcWVFdXFJaWE5gXlRi
        XFVQSDtOSD1QRzo/PzlCP0FDQEI/O0FQRD5LPUFDQEI/OD85PERUYm6Lkpt8f4Nzbm14dHOlpqqWm6Rm
        aGlQT1NMSkpPTUI2OT42PUA3PEUsLUFDQkZjXVhUVFRMS007PUUrMTY4NzMzMEAnKUEqK0A4OkIbHkQc
        Hz4eIj8tODwlKj8dJjoaLTwRKzkJIzMiMjgiMDweJTgcIzcjLzMjLzUhLS8uNjYuOz1KUE9ZXl1kaGlv
        bmp4c2pDS0o8S000QEYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>